from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.edge.service import Service
from selenium.webdriver.edge.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import time
from datetime import datetime, timedelta
import os
import glob
import shutil
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.base import MIMEBase
from email import encoders

# ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå config.py
from config import (
    get_login_config, get_email_config, get_circuit_config,
    get_file_config, get_webdriver_config, get_email_body,
    create_email_body, create_email_subject
)

# ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå config
webdriver_config = get_webdriver_config()
file_config = get_file_config()

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Edge Options ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
edge_options = Options()

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î - ‡πÉ‡∏ä‡πâ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå Downloads ‡∏Ç‡∏≠‡∏á Windows
from pathlib import Path

# ‡∏´‡∏≤‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå Downloads ‡∏Ç‡∏≠‡∏á Windows
user_downloads = str(Path.home() / "Downloads")
download_dir = user_downloads

print(f"‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î: {download_dir}")

if not os.path.exists(download_dir):
    os.makedirs(download_dir)

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
prefs = {
    "download.default_directory": download_dir,
    "download.prompt_for_download": False,  # ‡πÑ‡∏°‡πà‡∏ñ‡∏≤‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
    "download.directory_upgrade": True,
    "safebrowsing.enabled": False,  # ‡∏õ‡∏¥‡∏î safe browsing
    "profile.default_content_setting_values.automatic_downloads": 1,  # ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
    "profile.content_settings.exceptions.automatic_downloads.*.setting": 1,
    "profile.default_content_settings.popups": 0,  # ‡∏õ‡∏¥‡∏î‡∏õ‡πä‡∏≠‡∏õ‡∏≠‡∏±‡∏û
    "profile.managed_default_content_settings": {"downloads": 1},  # ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
}

print(f"‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏õ‡∏ó‡∏µ‡πà: {download_dir}")

# ‡πÄ‡∏û‡∏¥‡πà‡∏° arguments ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Edge
edge_options.add_argument("--disable-popup-blocking")  # ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏õ‡πä‡∏≠‡∏õ‡∏≠‡∏±‡∏û
'''
# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Headless Mode ‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå config
if webdriver_config["headless_mode"]:
    print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° Auto9am - ‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏á (Headless Mode)")
    # ‡πÄ‡∏û‡∏¥‡πà‡∏° arguments ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Headless Mode (‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠)
    edge_options.add_argument("--headless=new")  # ‡πÉ‡∏ä‡πâ headless mode ‡∏£‡∏∏‡πà‡∏ô‡πÉ‡∏´‡∏°‡πà
    edge_options.add_argument("--disable-gpu")  # ‡∏õ‡∏¥‡∏î GPU acceleration
    edge_options.add_argument("--no-sandbox")  # ‡∏õ‡∏¥‡∏î sandbox mode
    edge_options.add_argument("--disable-dev-shm-usage")  # ‡∏•‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ shared memory
    edge_options.add_argument("--disable-extensions")  # ‡∏õ‡∏¥‡∏î extensions
    edge_options.add_argument("--disable-plugins")  # ‡∏õ‡∏¥‡∏î plugins

    if webdriver_config["disable_images"]:
        edge_options.add_argument("--disable-images")  # ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß

    edge_options.add_argument(f"--window-size={webdriver_config['window_size']}")  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á
    edge_options.add_argument("--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36 Edg/91.0.864.59")  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î user agent
else:
    print("üñ•Ô∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° Auto9am - ‡πÇ‡∏´‡∏°‡∏î‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠")'''

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ preferences
edge_options.add_experimental_option("prefs", prefs)

# ‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á Edge WebDriver - ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å config
possible_driver_paths = webdriver_config["driver_paths"]

driver_path = None
for path in possible_driver_paths:
    if os.path.exists(path):
        driver_path = path
        print(f"‚úì ‡∏û‡∏ö Edge WebDriver ‡∏ó‡∏µ‡πà: {path}")
        break

if not driver_path:
    print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Edge WebDriver ‡πÉ‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏î‡πÜ")
    print("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Edge WebDriver ‡∏à‡∏≤‡∏Å: https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/")
    exit(1)

service = Service(driver_path)

# ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
login_config = get_login_config()

if webdriver_config["headless_mode"]:
    print("üì± ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î Edge WebDriver ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠...")
else:
    print("üñ•Ô∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î Edge WebDriver ‡πÅ‡∏ö‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠...")

driver = webdriver.Edge(service=service, options=edge_options)

print("üåê ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå...")
# ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå
driver.get(login_config["website_url"])

try:
    print("üîê ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö...")
    # ----------------------------------------------------
    #  1. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≠‡∏Å Username ‡πÅ‡∏•‡∏∞ Password
    # ----------------------------------------------------
    username_field = WebDriverWait(driver, webdriver_config["element_wait_timeout"]).until(
        EC.presence_of_element_located((By.XPATH, "//input[@placeholder='User intra']"))
    )
    username_field.send_keys(login_config["username"])

    password_field = WebDriverWait(driver, webdriver_config["element_wait_timeout"]).until(
        EC.presence_of_element_located((By.XPATH, "//input[@placeholder='Pass intra']"))
    )
    password_field.send_keys(login_config["password"])
    print("‚úÖ ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")

    # ----------------------------------------------------
    #  2. ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° "Continue"
    # ----------------------------------------------------
    print("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö...")
    continue_button = WebDriverWait(driver, webdriver_config["element_wait_timeout"]).until(
        EC.element_to_be_clickable((By.ID, "submit"))
    )
    continue_button.click()

    # ----------------------------------------------------
    #  3. ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤ Public ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏•‡∏¥‡∏Å "Traffic Report"
    # ----------------------------------------------------
    print("‚è≥ ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å...")
    WebDriverWait(driver, webdriver_config["element_wait_timeout"]).until(
        EC.url_to_be(login_config["public_url"])
    )
    print("‚úÖ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

    # ‡πÉ‡∏ä‡πâ JavaScript ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° Traffic Report
    print("üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏õ‡∏∏‡πà‡∏° Traffic Report...")
    traffic_report_selector = "#list-app > div:nth-child(4) > div:nth-child(7) > a"
    traffic_report_element = WebDriverWait(driver, webdriver_config["element_wait_timeout"]).until(
        EC.element_to_be_clickable((By.CSS_SELECTOR, traffic_report_selector))
    )
    driver.execute_script("arguments[0].click();", traffic_report_element)

    print("‚úÖ ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° 'Traffic Report' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!")

    # ----------------------------------------------------
    #  4. ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏á‡∏à‡∏£, ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° "‡∏™‡∏£‡πâ‡∏≤‡∏á"
    # ----------------------------------------------------
    print("‚è≥ ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤ Traffic Report...")
    WebDriverWait(driver, webdriver_config["element_wait_timeout"]).until(
        EC.url_to_be(login_config["traffic_report_url"])
    )
    print("‚úÖ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏´‡∏ô‡πâ‡∏≤ Traffic Report ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

    # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏á‡∏à‡∏£‡∏à‡∏≤‡∏Å config
    circuit_config = get_circuit_config()

    # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ID ‡∏Ç‡∏≠‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏á‡∏à‡∏£‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    print("üìù ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏á‡∏à‡∏£...")
    circuit_field = WebDriverWait(driver, webdriver_config["element_wait_timeout"]).until(
        EC.presence_of_element_located((By.ID, "f_circuit"))
    )
    circuits = circuit_config["circuits"]
    circuit_field.send_keys(circuits)
    print(f"‚úÖ ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏á‡∏à‡∏£: {circuits}")

    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î
    print("üìÖ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà...")
    # ‡πÉ‡∏ä‡πâ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    today = datetime.now().date()
    start_date = today - timedelta(days=1)  # ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô
    end_date = today  # ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ

    # ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: MM-DD-YYYY
    start_date_str = start_date.strftime('%m-%d-%Y')
    end_date_str = end_date.strftime('%m-%d-%Y')
    print(f"üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: {start_date_str}")
    print(f"üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î: {end_date_str}")

    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ JavaScript (‡∏•‡∏≠‡∏á‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö)
    print("üìÖ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°...")
    start_date_field = WebDriverWait(driver, webdriver_config["element_wait_timeout"]).until(
        EC.presence_of_element_located((By.ID, "f_date_start"))
    )

    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    driver.execute_script(f"arguments[0].value = '{start_date_str}';", start_date_field)
    driver.execute_script("arguments[0].dispatchEvent(new Event('change'));", start_date_field)

    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î
    end_date_field = WebDriverWait(driver, webdriver_config["element_wait_timeout"]).until(
        EC.presence_of_element_located((By.ID, "f_date_end"))
    )
    driver.execute_script(f"arguments[0].value = '{end_date_str}';", end_date_field)
    driver.execute_script("arguments[0].dispatchEvent(new Event('change'));", end_date_field)
    print("‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")

    # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°
    print("‚è≥ ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°...")
    time.sleep(3)

    # ‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° "‡∏™‡∏£‡πâ‡∏≤‡∏á"
    print("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô...")
    create_button = WebDriverWait(driver, webdriver_config["element_wait_timeout"]).until(
        EC.element_to_be_clickable((By.ID, "submit"))
    )

    # ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° "‡∏™‡∏£‡πâ‡∏≤‡∏á"
    driver.execute_script("arguments[0].click();", create_button)
    print("‚úÖ ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß")

    # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤
    def wait_for_results_page():
        try:
            # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏≤‡∏Å‡∏è
            WebDriverWait(driver, webdriver_config["results_wait_timeout"]).until(
                EC.presence_of_element_located((By.ID, "resdata"))
            )
            time.sleep(5)
            return True
        except Exception as e:
            print(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: {e}")
            return False

    # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°
    results_ready = wait_for_results_page()

    if results_ready:
        print("üéâ ‡∏´‡∏ô‡πâ‡∏≤‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå!")
        time.sleep(15)

        # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå PDF ‡∏ó‡∏µ‡πà‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡πá‡∏ö Traffic Report
        def rename_and_move_files():
                """‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå PDF ‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡πá‡∏ö Traffic Report ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà"""
                try:
                    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
                    folder_date_str = end_date.strftime('%d%m%Y')  # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå

                    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå Traffic_Report_‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏õ‡∏µ
                    traffic_folder_name = f"{file_config['folder_prefix']}{folder_date_str}"
                    traffic_folder_path = os.path.join(download_dir, traffic_folder_name)

                    if not os.path.exists(traffic_folder_path):
                        os.makedirs(traffic_folder_path)
                        print(f"üìÅ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå: {traffic_folder_name}")
                    else:
                        print(f"üìÅ ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß: {traffic_folder_name}")

                    # ‡∏´‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÑ‡∏ü‡∏•‡πå PDF ‡∏ó‡∏µ‡πà‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå Traffic Report
                    import time as time_module
                    current_time = time_module.time()
                    all_files = []

                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå PDF ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå Downloads
                    for file_path in glob.glob(os.path.join(download_dir, "*.pdf")):
                        if os.path.isfile(file_path):
                            file_time = os.path.getmtime(file_path)
                            file_name = os.path.basename(file_path)

                            # ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÑ‡∏ü‡∏•‡πå PDF ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î (‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î)
                            if current_time - file_time < file_config["file_search_timeout"]:
                                # ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏ô config (‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡πá‡∏ö Traffic Report)
                                if file_name.startswith(file_config["download_file_prefix"]) and file_name.endswith(".pdf"):
                                    all_files.append(file_path)
                                    print(f"üìÑ ‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå PDF ‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡πá‡∏ö: {file_name}")

                    print(f"üìä ‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå PDF ‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡πá‡∏ö Traffic Report: {len(all_files)} ‡πÑ‡∏ü‡∏•‡πå")

                    if not all_files:
                        print("‚ö† ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå PDF ‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡πá‡∏ö Traffic Report")
                        return

                    for file_path in all_files:
                        try:
                            # ‡πÅ‡∏¢‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞ extension
                            file_name = os.path.basename(file_path)
                            name_without_ext = os.path.splitext(file_name)[0]
                            extension = os.path.splitext(file_name)[1]

                            # ‡∏î‡∏∂‡∏á‡πÄ‡∏•‡∏Ç‡∏ß‡∏á‡∏à‡∏£‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏°
                            circuit_number = ""
                            if "_" in name_without_ext:
                                parts = name_without_ext.split("_")
                                if len(parts) >= 2:
                                    circuit_number = parts[1]  # ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏•‡∏±‡∏á _

                            # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏•‡∏Ç‡∏ß‡∏á‡∏à‡∏£ ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏°
                            if not circuit_number:
                                circuit_number = name_without_ext

                            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà‡∏ï‡∏≤‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏ô config
                            if not extension:
                                extension = ".pdf"

                            new_file_name = f"{file_config['new_file_prefix']}{circuit_number}_{end_date.strftime('%d%m%Y')}{extension}"

                            # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå Traffic_Report
                            if os.path.exists(file_path):
                                # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà
                                final_file_path = os.path.join(traffic_folder_path, new_file_name)
                                shutil.move(file_path, final_file_path)
                                print(f"‚úì ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏¢‡πâ‡∏≤‡∏¢: {file_name}")
                                print(f"  ‚Üí {traffic_folder_name}/{new_file_name}")
                            else:
                                print(f"‚ö† ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå: {file_name}")

                        except Exception as e:
                            print(f"‚ùå ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå {file_name} ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")

                    print(f"üéâ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
                    print(f"üìÅ ‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡∏π‡∏Å‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå: {traffic_folder_path}")

                    # ‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ú‡πà‡∏≤‡∏ô email
                    send_email_with_files(traffic_folder_path, traffic_folder_name)

                except Exception as e:
                    print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå: {e}")

        # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á email
        def send_email_with_files(folder_path, folder_name):
            """‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå PDF ‡∏ú‡πà‡∏≤‡∏ô email"""
            try:
                # ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏à‡∏≤‡∏Å config
                email_config = get_email_config()

                # ‡∏™‡∏£‡πâ‡∏≤‡∏á email message
                msg = MIMEMultipart()
                msg['From'] = email_config["sender_email"]
                msg['To'] = email_config["recipient_email"]
                msg['Subject'] = create_email_subject(folder_name)

                # ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ email - ‡πÉ‡∏ä‡πâ‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï‡∏à‡∏≤‡∏Å config
                body = create_email_body(end_date.strftime('%d/%m/%Y'))
                msg.attach(MIMEText(body, 'plain', 'utf-8'))

                # ‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå PDF ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
                pdf_files = glob.glob(os.path.join(folder_path, "*.pdf"))

                if not pdf_files:
                    print("‚ö† ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå PDF ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á email")
                    return

                print(f"üìß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏ô‡∏ö‡πÑ‡∏ü‡∏•‡πå: {len(pdf_files)} ‡πÑ‡∏ü‡∏•‡πå")

                # ‡πÅ‡∏ô‡∏ö‡πÑ‡∏ü‡∏•‡πå PDF
                for pdf_file in pdf_files:
                    file_name = os.path.basename(pdf_file)
                    print(f"  üìé ‡πÅ‡∏ô‡∏ö‡πÑ‡∏ü‡∏•‡πå: {file_name}")

                    with open(pdf_file, "rb") as attachment:
                        part = MIMEBase('application', 'octet-stream')
                        part.set_payload(attachment.read())

                    encoders.encode_base64(part)
                    part.add_header(
                        'Content-Disposition',
                        f'attachment; filename= {file_name}',
                    )
                    msg.attach(part)

                # ‡∏™‡πà‡∏á email
                print("üìß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á email...")
                server = smtplib.SMTP(email_config["smtp_server"], email_config["smtp_port"])
                server.starttls()  # ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô TLS
                server.login(email_config["sender_email"], email_config["sender_password"])
                text = msg.as_string()
                server.sendmail(email_config["sender_email"], email_config["recipient_email"], text)
                server.quit()

                print("‚úÖ ‡∏™‡πà‡∏á email ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                print(f"üìß ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á: {email_config['recipient_email']}")

            except Exception as e:
                print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á email: {e}")
                print("üí° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:")
                print("   - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• email ‡πÅ‡∏•‡∏∞ password")
                print("   - ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï")
                print("   - ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ App Password ‡∏Ç‡∏≠‡∏á Gmail")

        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå
        rename_and_move_files()
    else:
        print("‚ùå ‡∏´‡∏ô‡πâ‡∏≤‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÑ‡∏°‡πà‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

    print("‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
    
except Exception as e:
    print(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
    
finally:
   driver.quit()